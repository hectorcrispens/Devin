import os
import json
from collections import namedtuple

class RollItem():
    def __init__(self, path, section, block, op, value, chain):
        self.path = path
        self.section = section
        self.block = block
        self.op = op
        self.value = value
        self.chain = chain
        
class Rollback():
    
    place = os.path.dirname(__file__)
    
    @classmethod    
    def load(self):
        stack = None
        try:
            with open(os.path.join(Rollback.place, "stack.json"), "r") as f:
                text = f.read()
                stack = json.loads(text)
                return stack
        except IOError:
            f = open(os.path.join(Rollback.place, "stack.json"), "w")
            f.write("{ \"stack\": [] }")
            f.close()
            return self.load()

    @classmethod
    def save(self, obj):
        text = json.dumps(obj, indent=4)
        #print(os.path.join(Rollback.place, "stack.json"))
        with open(os.path.join(Rollback.place, "stack.json"), "w") as f:
            f.write(text)

    @classmethod
    def push(self, value):
        stack = self.load()
        stack["stack"].append(value.__dict__)
        self.save(stack)

    @classmethod
    def chain(self):
        try:
            lista = [self.pop()]
            if not lista[0]:
                return lista[0]
            item = self.floop()
            while item and item.chain == lista[0].chain:
                item = self.pop()
                lista.append(item)
                item = self.floop()
            return lista
        except AttributeError:
            print("Error in the chain read")
            return None

    @classmethod
    def floop(self):
        stack = self.load()
        try:
            item = stack["stack"][-1]
            self.save(stack)
            #print(type(item))
            named = namedtuple("RollItem", item.keys())(*item.values())
            #self.imprime(named)
            return named
        except IndexError:
            print("El Stack se ha vaciado")
    
        
    @classmethod
    def pop(self):
        stack = self.load()
        try:
            item = stack["stack"].pop(-1)
            self.save(stack)
            #print(type(item))
            named = namedtuple("RollItem", item.keys())(*item.values())
            #self.imprime(named)
            return named
        except IndexError:
            print("El Stack se ha vaciado")

    @classmethod
    def imprime(self, named):
        #print("-------------------")
        print("section: "+str(named.section))
        print("value: "+named.value)
        print("path: "+named.path)
        print("block: "+str(named.block))
        print("operation: " +named.op)
        print("chain: "+named.chain)
        
        
        
